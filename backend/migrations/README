Migrations are only needed for production deployment. For local development,
the database is created and dropped with the `reset_demo` script.

To create a migration:

0. Be sure you have pushed all changes to a remote branch
1. Switch to `main`
2. Run the generate migration script:
    `python3 -m backend.script.generate_migration <remote> <branch>`
3. Review the generated migration by looking at the new file added to `backend/migration/versions`
4. Edit the contents of the generated migration to match the desired migration
    Common issues:
        1. Renamed tables shouldn't be created and dropped as new tables
        2. Enums need to be explicitly dropped (see 3b3cd for an example)
        3. New fields that are non-nullable need default values (see 1952e for an example)

Validate the migration:

1. Run `alembic upgrade head` to run the migration (all tables should be created)
2. Try using the app to validate functionality
3. Run `alembic downgrade head-1` to undo the migration and test rollback
4. Repeat 8 and 9 to confirm rollback and upgrade work as expected

When things go wrong:

If the initial upgrade/downgrade fail, you can try to fix the migration and run it/downgrade again.

If the initial upgrade/downgrade succeeds, but the second upgrade fails, your best bet is typically to do the following:

1. `git switch main`
2. `python3 -m backend.script.reset_testing`
3. `alembic stamp head`
4. `git switch <branch>`
5. `alembic upgrade head`

This sequence of steps gives you a clean slate to retry the upgrade/downgrade of the migration with.

On production deploy run `alembic upgrade head` on a pod with the latest build. 